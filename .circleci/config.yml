# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.1/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@5.0
  azure-cli: circleci/azure-cli@1.2.0

env:
    AZURE_WEBAPP_NAME: MasterDataWarehouseManagement
    AZURE_WEBAPP_PACKAGE_PATH: './published' 
   
jobs:
  build-and-test-GestArm_API:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - checkout
      - run:
          working_directory: Backend/GestArm_API/GestArm/
          name: Build
          command: |
            dotnet build
      - save_cache:
          key: dotnet-packages-v1-{{ checksum "Backend/GestArm_API/GestArm/DDDNetCore.csproj" }}
          paths:
            - Backend/GestArm_API/GestArm/

      - run:
          working_directory: Backend/GestArm_API/GestArmTestes/UnitTesting
          name: Unit Testing
          command: |
            dotnet build
            dotnet test

      - run:
          working_directory: Backend/GestArm_API/GestArmTestes/IntegrationTesting
          name: Integration Testing
          command: |
            dotnet build
            dotnet test
    
  build-and-test-GestLog_API:
    docker:
       - image: cimg/node:current
    steps:
      - checkout
      - run:
          working_directory: Backend/GestLogistica_API/GestLogistica
          name: install-npm
          command:  |
           rm -f package-lock.json
           npm innit --yes
           npm install --save
      - save_cache:
          key: dependency-cache-{{ checksum "Backend/GestLogistica_API/GestLogistica/package.json" }}
          paths:
            - Backend/GestLogistica_API/GestLogistica/node_modules

      - run:
          working_directory: Backend/GestLogistica_API/GestLogistica
          name : Build
          command: |
            npm run build

      - run:
          working_directory: Backend/GestLogistica_API/GestLogistica
          name : Coverage
          command: |
            npm run coverage     
      - store_artifacts:
          path: Backend/GestLogistica_API/GestLogistica/coverage

  build-gestArm-cloud-application:
    description: Build application with Release configuration
    executor:
      name: win/server-2022
    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "Backend/GestArm_API/GestArm/DDDNetCore.csproj" }}
      #Tirar este passo?
      - run:
          working_directory: Backend/GestArm_API/GestArm/
          name: "Install project dependencies"
          command: dotnet restore

      - run:
          working_directory: Backend/GestArm_API/GestArm/
          name: "Build Application according to some given configuration"
          command: dotnet build --configuration Release
          
      - run:
          working_directory: Backend/GestArm_API/GestArm/
          name: "Publish to a subfolder"
          command: |
            dotnet publish --configuration Release --no-build --output $env.AZURE_WEBAPP_PACKAGE_PATH
      - persist_to_workspace:
          root: Backend/GestArm_API/GestArm/
          paths:
            - $env.AZURE_WEBAPP_PACKAGE_PATH

  login-to-azure-and-deploy:
    executor: azure-cli/azure-docker
    steps:
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - attach_workspace:
          at: Backend/GestArm_API/GestArm/
      - run:
          command: az webapp deployment source show --resource-group $env.AZURE_WEBAPP_NAME --name MasterDataWarehouseManagement-application
      - run:
          name: "Deploy Web App to Azure"
          command: |
            az webapp deployment source config-local-git --resource-group $env.AZURE_WEBAPP_NAME --name MasterDataWarehouseManagement-application    
   
workflows:
  build-test-deploy:
    jobs:
      - build-and-test-GestArm_API
      - build-and-test-GestLog_API
      
      - build-gestArm-cloud-application:
          requires:
            - build-and-test-GestArm_API

      - login-to-azure-and-deploy:
          requires:
            - build-gestArm-cloud-application