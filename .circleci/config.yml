# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.1/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@5.0
  azure-cli: circleci/azure-cli@1.2.0

env:
    AZURE_WEBAPP_NAME: MasterDataWarehouseManagement
    AZURE_WEBAPP_PACKAGE_PATH: './published' 
   
jobs:
  Build-GestArm_API:
    description: Build the GestArm API
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - checkout
      - run:
          working_directory: Backend/GestArm_API/GestArm/
          name: Build
          command: |
            dotnet build
      - save_cache:
          key: dotnet-packages-v1-{{ checksum "Backend/GestArm_API/GestArm/DDDNetCore.csproj" }}
          paths:
            - Backend/GestArm_API/GestArm/

  Unit-testing-GestArm_API:
    description: Unit testing in the GestArm API
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - checkout
      - run:
          working_directory: Backend/GestArm_API/GestArmTestes/UnitTesting
          name: Unit Testing
          command: |
            dotnet build
            dotnet test

  Integration-testing-GestArm_API:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - checkout
      - run:
          working_directory: Backend/GestArm_API/GestArmTestes/IntegrationTesting
          name: Integration Testing
          command: |
            dotnet build
            dotnet test
    
  Build-GestLog_API:
    description: Build the GestLog API
    docker:
       - image: cimg/node:current
    steps:
      - checkout
      - run:
          working_directory: Backend/GestLogistica_API/GestLogistica
          name: install-npm
          command:  |
           rm -f package-lock.json
           npm innit --yes
           npm install --save
      - save_cache:
          key: dependency-cache-{{ checksum "Backend/GestLogistica_API/GestLogistica/package.json" }}
          paths:
            - Backend/GestLogistica_API/GestLogistica/node_modules
            
      - run:
          working_directory: Backend/GestLogistica_API/GestLogistica
          name : Build
          command: |
            npm run build

  Unit-Test-GestLog_API:
    description: Unit testing in the GestLog API
    docker:
       - image: cimg/node:current
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "Backend/GestLogistica_API/GestLogistica/package.json" }}

      - run:
          working_directory: Backend/GestLogistica_API/GestLogistica
          name : Coverage
          command: |
            npm run coverage     
      - store_artifacts:
          path: Backend/GestLogistica_API/GestLogistica/coverage

  Build-gestArm-cloud-application:
    description: Build application with Release configuration
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "Backend/GestArm_API/GestArm/DDDNetCore.csproj" }}
      - run:
          working_directory: Backend/GestArm_API/GestArm/
          name: "Install project dependencies"
          command: dotnet restore

      - run:
          working_directory: Backend/GestArm_API/GestArm/
          name: "Build Application according to some given configuration"
          command: dotnet build --no-restore --configuration Release

      - run:
          working_directory: Backend/GestArm_API/GestArm/
          name: "Publish to a subfolder"
          command: |
            dotnet publish --configuration Release --no-build --output published
      - persist_to_workspace:
          root: Backend/GestArm_API/GestArm/
          paths:
            - published

  Login-to-azure-and-deploy:
    description: Deploy the GestArm into Azure
    executor: azure-cli/azure-docker
    steps:
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - attach_workspace:
          at: Backend/GestArm_API/GestArm/published
      - run:
          working_directory: Backend/GestArm_API/GestArm/published
          command: az webapp deployment source show --resource-group MasterDataWarehouseManagement --name MasterDataWarehouseManagement
      - run:
          working_directory: Backend/GestArm_API/GestArm/published
          name: "Deploy Web App to Azure"
          command: |
            az webapp deployment source config-local-git --resource-group MasterDataWarehouseManagement --name MasterDataWarehouseManagement
            git init
            git config --global user.email "1201487@isep.ipp.pt"
            git config --global user.name "Jordans"
            git add .
            git commit -m "Deploy Azure Web Application"
            git remote add azure https://$GIT_USERNAME:$GIT_PASSWORD@masterdatawarehousemanagement.scm.azurewebsites.net/MasterDataWarehouseManagement.git
            git push azure master --force 
   
workflows:
  build-test-deploy:
    jobs:
      - Build-GestArm_API
      - Build-GestLog_API
      
      - Integration-testing-GestArm_API:
          requires:
            - Build-GestArm_API

      - Unit-testing-GestArm_API:
          requires:
            - Build-GestArm_API

      - Unit-Test-GestLog_API:
          requires:
            - Build-GestLog_API

      - Build-gestArm-cloud-application:
          requires:
            - Integration-testing-GestArm_API
            - Unit-testing-GestArm_API

      - Login-to-azure-and-deploy:
          requires:
            - Build-gestArm-cloud-application