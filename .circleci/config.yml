# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.1/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@5.0
  azure-cli: circleci/azure-cli@1.2.0
  browser-tools: circleci/browser-tools@1.2.3

env:
    AZURE_WEBAPP_NAME: MasterDataWarehouseManagement
    AZURE_WEBAPP_PACKAGE_PATH: './published' 
   
jobs:
  Build-GestArm_API:
    description: Build the gestArm application
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - checkout
      - restore_cache:
          key: dotnet-packages-v1-{{ checksum "Backend/GestArm_API/GestArm/DDDNetCore.csproj" }}
      - run:
          working_directory: Backend/GestArm_API/GestArm/
          name: Build the application
          command: |
            dotnet build
      - save_cache:
          key: dotnet-packages-v1-{{ checksum "Backend/GestArm_API/GestArm/DDDNetCore.csproj" }}
          paths:
            - Backend/GestArm_API/GestArm/

  Unit-testing-GestArm_API:
    description: Run all unit tests from the gestArm application
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - checkout
      - run:
          working_directory: Backend/GestArm_API/GestArmTestes/UnitTesting
          name: Unit Testing
          command: |
            dotnet build
            dotnet test

  Integration-testing-GestArm_API:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - checkout
      - run:
          working_directory: Backend/GestArm_API/GestArmTestes/IntegrationTesting
          name: Integration Testing
          command: |
            dotnet build
            dotnet test
    
  Build-GestLog_API:
    description: Build the gestLog application
    docker:
       - image: cimg/node:current
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "Backend/GestLogistica_API/GestLogistica/package.json" }}
      - run:
          working_directory: Backend/GestLogistica_API/GestLogistica
          name: Install all gestLog dependecies
          command:  |
           rm -f package-lock.json
           npm innit --yes
           npm install --save
      - save_cache:
          key: dependency-cache-{{ checksum "Backend/GestLogistica_API/GestLogistica/package.json" }}
          paths:
            - Backend/GestLogistica_API/GestLogistica/node_modules
      - run:
          working_directory: Backend/GestLogistica_API/GestLogistica
          name : Build the gestLog application
          command: |
            npm run build
      - persist_to_workspace:
          root: Backend/GestLogistica_API/GestLogistica
          paths:
            - .

  Unit-Integration-Tests-GestLog_API:
    description: Run all the testes from the gestLog application
    docker:
       - image: cimg/node:current
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "Backend/GestLogistica_API/GestLogistica/package.json" }}
      - run:
          working_directory: Backend/GestLogistica_API/GestLogistica
          name : Run the gestLog tests and generate coverage
          command: |
            npm run coverage     
      - store_artifacts:
          path: Backend/GestLogistica_API/GestLogistica/coverage

  Build-FrontEnd-Application:
    description: Build the Front end Application
    docker:
       - image: cimg/node:16.13.1-browsers
    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          working_directory: Frontend/WebUI/ElectricGo
          command: |
            google-chrome --version
            chromedriver --version
          name: Check install
      - restore_cache:
          key: dependency-cache-{{ checksum "Frontend/WebUI/ElectricGo/package.json" }}
      - run:
          working_directory: Frontend/WebUI/ElectricGo
          name : Build the Front end application
          command: |
            npm install
            npm run build            
      - save_cache:
          key: dependency-cache-{{ checksum "Frontend/WebUI/ElectricGo/package.json" }}
          paths:
            - Frontend/WebUI/ElectricGo/node_modules
      - persist_to_workspace:
          root: Frontend/WebUI/ElectricGo
          paths:
            - .

  Test-FrontEnd-Application:
    description: Build the Front end Application
    docker:
       - image: cimg/node:16.13.1-browsers
    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Verify installation
          command: |
            google-chrome --version
            chromedriver --version
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "Frontend/WebUI/ElectricGo/package.json" }}
      - run:
          working_directory: Frontend/WebUI/ElectricGo
          name : Run the gestLog tests and generate coverage
          command: |
            npm run test
      - store_artifacts:
          path: Frontend/WebUI/ElectricGo/coverage

  Pulish-gestArm-to-folder:
    description: Publish the application to a folder with a certain configuration reference
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "Backend/GestArm_API/GestArm/DDDNetCore.csproj" }}
      - run:
          working_directory: Backend/GestArm_API/GestArm/
          name: Install project dependencies
          command: dotnet restore
      - run:
          working_directory: Backend/GestArm_API/GestArm/
          name: Build gestArm application according to some given configuration
          command: dotnet build --no-restore --configuration Release
      - run:
          working_directory: Backend/GestArm_API/GestArm/
          name: Publish the build result to a subfolder
          command: |
            dotnet publish --configuration Release --no-build --output published
      - persist_to_workspace:
          root: Backend/GestArm_API/GestArm/
          paths:
            - published

  Login-to-azure-and-deploy:
    description: Deploy the gestArm application into the Azure cloud
    executor: azure-cli/azure-docker
    steps:
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - attach_workspace:
          at: Backend/GestArm_API/GestArm/published
      - run:
          working_directory: Backend/GestArm_API/GestArm/published
          name: Access all application resources from the azure cloud
          command: az webapp deployment source show --resource-group MasterDataWarehouseManagement --name MasterDataWarehouseManagement
      - run:
          working_directory: Backend/GestArm_API/GestArm/published
          
          name: Deploy gestArm application to Azure cloud
          command: |
            az webapp deployment source config-local-git --resource-group MasterDataWarehouseManagement --name MasterDataWarehouseManagement
            git init
            git config --global user.email "1201487@isep.ipp.pt"
            git config --global user.name "Jordans"
            git config --global http.postBuffer 157286400
            git add .
            git commit -m "Deploy Azure Web Application"
            git remote add azure https://$GIT_USERNAME:$GIT_PASSWORD@masterdatawarehousemanagement.scm.azurewebsites.net/MasterDataWarehouseManagement.git
            git push azure master --force 


  # Login-to-azure-and-deploy-frontEnd:
  #   description: Deploy the gestArm application into the Azure cloud
  #   executor: azure-cli/azure-docker
  #   steps:
  #     - azure-cli/install
  #     - azure-cli/login-with-service-principal
  #     - attach_workspace:
  #         at: Frontend/WebUI/ElectricGo
  #     - run:
  #         working_directory: Frontend/WebUI/ElectricGo
  #         name: Access all application resources from the azure cloud
  #         command: az webapp deployment source show --resource-group MasterDataWarehouseManagement --name EletricGO
  #     - run:
  #         working_directory: Frontend/WebUI/ElectricGo
  #         name: Deploy gestArm application to Azure cloud
  #         command: |
  #           az webapp deployment source config-local-git --resource-group MasterDataWarehouseManagement --name EletricGO
  #           git init
  #           git config --global user.email "1201487@isep.ipp.pt"
  #           git config --global user.name "Jordans"
  #           git config --global http.postBuffer 157286400
  #           git add .
  #           git commit -m "Deploy Azure Web Application"
  #           git remote add azure https://$GIT_USERNAME:$GIT_PASSWORD@eletricgo.scm.azurewebsites.net:443/EletricGO.git
  #           git push azure master --force 

  # Login-to-azure-and-deploy-gest-log:
  #   description: Deploy the gestLog application into the Azure cloud
  #   executor: azure-cli/azure-docker
  #   steps:
  #     - azure-cli/install
  #     - azure-cli/login-with-service-principal
  #     - attach_workspace:
  #         at: Backend/GestLogistica_API/GestLogistica
  #     - run:
  #         working_directory: Backend/GestLogistica_API/GestLogistica
  #         name: Access all application resources from the azure cloud
  #         command: az webapp deployment source show --resource-group MasterDataWarehouseManagement --name MasterDataLogManagement
  #     - run:
  #         working_directory: Backend/GestLogistica_API/GestLogistica
  #         name: Deploy gestLog application to Azure cloud
  #         command: |
  #           az webapp deployment source config-local-git --resource-group MasterDataWarehouseManagement --name MasterDataLogManagement
  #           git init
  #           git config --global user.email "1201487@isep.ipp.pt"
  #           git config --global user.name "Jordans"
  #           git config --global http.postBuffer 157286400
  #           git add .
  #           git commit -m "Deploy Azure Web Application"
  #           git remote add azure https://$GIT_USERNAME:$GIT_PASSWORD@masterdatawarehousemanagement.scm.azurewebsites.net/MasterDataWarehouseManagement.git
  #           git push azure master --force 
   
workflows:
  build-test-deploy:
    jobs:
      - Build-GestArm_API
      - Build-GestLog_API
      - Build-FrontEnd-Application
      
      - Integration-testing-GestArm_API:
          requires:
            - Build-GestArm_API 
      - Unit-testing-GestArm_API:
          requires:
            - Build-GestArm_API

      - Unit-Integration-Tests-GestLog_API:
          requires:
            - Build-GestLog_API

      - Test-FrontEnd-Application:
          requires:
            - Build-FrontEnd-Application

      -  Pulish-gestArm-to-folder:
          requires:
            - Integration-testing-GestArm_API
            - Unit-testing-GestArm_API

      - Login-to-azure-and-deploy:
          requires:
            - Pulish-gestArm-to-folder

      # - Login-to-azure-and-deploy-frontEnd:
      #     requires:
      #       - Test-FrontEnd-Application


      # - Login-to-azure-and-deploy-gest-log:
      #     requires:
      #       - Unit-Integration-Tests-GestLog_API